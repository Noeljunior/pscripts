#!/bin/bash

DIR=$1
DEST=$2
LZ=$3
FORCE=$4

# default destination directory
if [ -z "$DEST" ]; then
    DEST="ORIGINAL"
    echo "WARNING: Defaulting destination directory to \"ORIGINAL\""
fi
#DEST=$(readlink -f $DEST)
mkdir -p "$DEST"

# default # digits
if [ -z "$LZ" ]; then
    LZ="4"
fi
echo "Using $LZ digits"

# check for forcing
if [ "$FORCE" = "force" ]; then
    FORCE="force"
else
    FORCE=""
fi

# temp directory
TMP="/tmp/copysort/"
mkdir -p $TMP


# list all files
FILELIST=$TMP"filelist"
function findall { # except hidden
#    -maxdepth 1 \
    find "$1" \
    -not -path '*/\.*' \
    \( -name '*.JPG' -o \
    -name '*.jpg' -o \
    -name '*.JEPG' -o \
    -name '*.jpeg' \)
}
findall "$DIR" > "$FILELIST"

# get create date
#DATES=$TMP"dates"
#function getdate {
#    _DATE=$(exiftool -fast2 -d "%Y%m%d%H%M%S" -CreateDate "$1" | cut -d':' -f 2 | xargs)
#    echo "$_DATE" "$1"
#}
#export -f getdate
#cat "$FILELIST" | parallel -j 16 getdate ::: > "$DATES"


# sort
function getsortedfiles {
    exiftool -S -d "%Y%m%d%H%M%S" -CreateDate $(cat $1) | \
        sed '$!N;s/\n/::/' | grep "CreateDate" | \
        sed 's/======== //' | sed 's/::CreateDate: /,/' | \
        sort -t',' -k2 -h | cut -d',' -f1
}
SORTS=$TMP"sorts"
#cat "$DATES" | sort -h | cut -d' ' -f2 > "$SORTS"
getsortedfiles "$FILELIST" > "$SORTS"

# copy if not yet copied
start=0
while read img; do
    SIMG=$(echo $img)
    # increment and build the name
    let start=start+1
    new=$(printf "%0$LZ""d" "$start")
    extension="${SIMG##*.}"
    DIMG=$(echo "$DEST/$new.$extension")

    # if destination does not exists, it is a new file so copy it
    if [ ! -f "$DIMG" ]; then
        cp "$SIMG" "$DIMG"
        continue
    else # file exists...
        CMP=$(cmp --silent "$SIMG" "$DIMG" && echo 1 || echo 2)
        if [ "$CMP" = "2" ]; then # different files
            echo "WARNING: it looks like that source file list is different!"
            echo "WARNING: \"$SIMG\" is not the same as \"$DIMG\""
            if [ "$FORCE" = "force" ]; then
                echo "WARNING: overrinding files!"
                cp "$SIMG" "$DIMG"
            else
                echo "WARNING: aborting!"
                exit 1
            fi
        fi

    fi

done <"$SORTS"

# remove temp files
rm -rf "$TMP"
