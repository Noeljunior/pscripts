#!/usr/bin/env python3

# aaccelerometer
accel_dev = '/sys/bus/iio/devices/iio:device0'

accel_max = 255
accel_med = 127
accel_sd  = 64
# magic numbers reported by accelerometer when the laptop is not folded
accel_unfolded = (3, 163, 220)
# update  rate in hertz
refresh_rate = 4
# how many seconds to wait after a detected change
prevent_fast_change = 0.5

touchscreen_in      = "ELAN Touchscreen"
touchscreen_prop1   = "Device Enabled"
touchscreen_prop2   = "Coordinate Transformation Matrix"
touchpad_in         = "AlpsPS/2 ALPS GlidePoint"
touchpad_prop1      = "Device Enabled"
keyboard_in         = "AT Translated Set 2 keyboard"
keyboard_prop1      = "Device Enabled"

execute = {
    0: [   # unfolded
        ['xrandr', '-o', 'normal'],
        ['pkill', 'onboard'],
        ['xinput', 'set-prop', touchscreen_in, touchscreen_prop1, '1'],
        ['xinput', 'set-prop', touchscreen_in, touchscreen_prop2] + '1 0 0 0 1 0 0 0 1'.split(),
        ['xinput', 'set-prop', touchpad_in,    touchpad_prop1, '1'],
        #['xinput', 'set-prop', keyboard_in,    keyboard_prop1, '1'],
    ],
    1: [   # up
        ['xrandr', '-o', 'normal'],
        ['onboard', '&'],
        ['xinput', 'set-prop', touchscreen_in, touchscreen_prop1, '1'],
        ['xinput', 'set-prop', touchscreen_in, touchscreen_prop2] + '1 0 0 0 1 0 0 0 1'.split(),
        ['xinput', 'set-prop', touchpad_in,    touchpad_prop1, '0'],
        #['xinput', 'set-prop', keyboard_in,    keyboard_prop1, '1'],
    ],
    2: [   # left
        ['xrandr', '-o', 'left'],
        ['onboard', '&'],
        ['xinput', 'set-prop', touchscreen_in, touchscreen_prop1, '1'],
        ['xinput', 'set-prop', touchscreen_in, touchscreen_prop2] + '0 -1 1 1 0 0 0 0 1'.split(),
        ['xinput', 'set-prop', touchpad_in,    touchpad_prop1, '0'],
        #['xinput', 'set-prop', keyboard_in,    keyboard_prop1, '1'],
    ],
    3: [    # down
        ['xrandr', '-o', 'inverted'],
        ['onboard', '&'],
        ['xinput', 'set-prop', touchscreen_in, touchscreen_prop1, '1'],
        ['xinput', 'set-prop', touchscreen_in, touchscreen_prop2] + '-1 0 1 0 -1 1 0 0 1'.split(),
        ['xinput', 'set-prop', touchpad_in,    touchpad_prop1, '0'],
        #['xinput', 'set-prop', keyboard_in,    keyboard_prop1, '1'],
    ],
    4: [    # right
        ['xrandr', '-o', 'right'],
        ['onboard', '&'],
        ['xinput', 'set-prop', touchscreen_in, touchscreen_prop1, '1'],
        ['xinput', 'set-prop', touchscreen_in, touchscreen_prop2] + '0 1 0 -1 0 1 0 0 1'.split(),
        ['xinput', 'set-prop', touchpad_in,    touchpad_prop1, '0'],
        #['xinput', 'set-prop', keyboard_in,    keyboard_prop1, '1'],
    ],
}

states = {
    0: "unfolded",
    1: "up",
    2: "left",
    3: "down",
    4: "right"
}

from time import sleep

# helper: run proccess
from subprocess import check_call, check_output, Popen
from os import environ
shrun_env = environ.copy()
def shrun(cmd, blocking = True):
    # if cmd is not a [], convert it
    if type(cmd) is not list:
        cmd = cmd.split()
    if blocking:
        return check_output(cmd, env = shrun_env)
    Popen(cmd, env = shrun_env)


# TODO helper: source bash-like config file


# compute x, y and z pathss
from os import path as op
accelx_fp = open(op.join(accel_dev, 'in_accel_x_raw'))
accely_fp = open(op.join(accel_dev, 'in_accel_y_raw'))
accelz_fp = open(op.join(accel_dev, 'in_accel_z_raw'))
def readfp(fp):
    fp.seek(0)
    return int(fp.read())

def read_accel():
    return readfp(accelx_fp), readfp(accely_fp), readfp(accelz_fp)


if __name__ == '__main__':
    global state
    # ingore first readings
    print("Ignoring first readings...")
    read_accel()
    sleep(2)
    print("Starting up")
    
    state_now  = -1
    state_read = 0
    
    prevent = prevent_fast_change - (1 / refresh_rate)
    if prevent < 0:
        prevent = 0
    
    while True:
        sleep(1 / refresh_rate)
        accel = (read_accel())
        if accel == accel_unfolded: # unfolded
            state_read = 0
        else:                       # folded
            if accel[0] > (accel_med - accel_sd) and accel[0] < (accel_med + accel_sd):
                # this is portrait mode
                if accel[0] > accel_med: # right
                    state_read = 4
                else:                    # left
                    state_read = 2
            elif accel[1] > (accel_med - accel_sd) and accel[1] < (accel_med + accel_sd):
                # this is landscape
                if accel[1] > accel_med: # normal
                    state_read = 1
                else:                    # inverted
                    state_read = 3
            else:
                if state_read > 0:
                    print("Strange accelerometer position. Ignoring.")
                    state_read = -1
                continue

        #print(accel)

        if state_now != state_read:
            print("Changing to %s" % states[state_read])
            state_now = state_read

            # TODO check if autorotate is off
            
            # TODO check if execute[state_now] exists
            for e in execute[state_now]:
                shrun(e, False)

            sleep(prevent)


