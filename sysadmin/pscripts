#!/bin/python3

import os
import sys
import subprocess

pscripstroot = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

def computepath(startpath):
    path = set([])
    for root, dirs, files in os.walk(startpath, topdown=True):
        if os.path.basename(root).startswith(".") or \
           ".pignoreall" in files:
            dirs[:] = []
            continue 

        if ".pignore" in files:
            continue

        path.add(root)
    return ':' + ':'.join(path)

def installdir(path):
    subprocess.call('@install -m 755 -d "{}"'.format(path), shell=True)
def installfile(path, file):
    subprocess.call('@install -m 644 -t "{}" "{}"'.format(path, file), shell=True)

if len(sys.argv) < 2:
    print("ERROR: give one action: 'update-path', 'update', 'root' or 'install'")
    sys.exit(1)


if sys.argv[1] == "update-path":
    filesh = '/etc/profile.d/pscripts.sh'
    cmd = "echo 'export PATH=$PATH{}' > '{}' && chmod +x '{}'".format(
        computepath(pscripstroot), filesh, filesh)

    if (os.geteuid() >= 1000):
        print('You need root privileges to do this.')
        process = subprocess.Popen("sudo {} update-path".format(sys.argv[0]), shell=True)
        process.wait()
        sys.exit(0)

    process = subprocess.Popen(cmd, shell=True)
    process.wait()

    print("Done.")

elif sys.argv[1] == "update":
    process = subprocess.Popen("git reset --hard && git pull", cwd=root, shell=True)
    process.wait()
elif sys.argv[1] == "root":
    print(pscripstroot)
elif sys.argv[1] == "install": # install as a system package
    if (os.geteuid() >= 1000):
        print('You need root privileges to do this.')
        sys.exit(1)

    try:
        installlocation = sys.argv[2]
    except IndexError:
        installlocation = "/opt/pscripts"
        print("Installing to: '{}'".format(installlocation))

    installdir(installlocation)

    paths = set([])
    for root, dirs, files in os.walk("./", topdown=True):
        if os.path.basename(root).startswith(".") or \
           ".pignoreall" in files:
            dirs[:] = []
            continue

        if ".pignore" in files:
            continue

        # compute destination dir
        rootdest = os.path.join(installlocation, root)

        # compute destination files
        filesdest = set([])
        for file in files:
            filedest = os.path.join(root, file)
            if os.access(filedest, os.X_OK):
                filesdest.add(filedest)

        if len(filesdest) < 1:
            continur

        # add this dir to the final PATH
        paths.add(rootdest)
        
        # install dir
        installdir(rootdest)

        # install files
        for file in filesdest:
            installfile(rootdest, file)
        
        sys.exit(0)
else:
    print("'{}' is not a valid action.".format(sys.argv[1]))
    sys.exit(1)
sys.exit(1)
