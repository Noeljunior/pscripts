#!/bin/python3

import os
import sys
import subprocess
import argparse

# TODO
#   - make it install specific non-exectuable files/dirs
#   - from .. import ...

#   .pignore   : ignores all files, continue the search in depth
#   .pignoreall: ignores the dir and sub dir
#   .pnoexec   : the files in this dir will be installed as non-executables

pscripstroot = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

_INSTALLPATH = '/opt/pscripts'
_PROFILEPATH = '/etc/profile.d/pscripts.sh'


def installdir(pathm, perm = "755"):
    if subprocess.call('install -m {} -d "{}"'.format(perm, path), shell=True) is not 0:
        sys.exit(1)
def installfile(path, file, perm = "755"):
    if subprocess.call('install -D -m {} "{}" "{}"'.format(perm, path, file), shell=True) is not 0:
        sys.exit(1)


if __name__ == "__main__":
    # parse the args
    parser = argparse.ArgumentParser()
    parser.add_argument("--install", metavar="PATH", nargs='?', const=_INSTALLPATH,
                        help='installs to the PATH (defaults to "{}")'.format(_INSTALLPATH))
    parser.add_argument("--profile", metavar="PATH", default=_PROFILEPATH,
                        help='Path to install the environment script (defaults to "{}")'.format(_PROFILEPATH))
    parser.add_argument("--rm-prefix", metavar="PATH",
                        help='Remove PATH from generated paths (workaround for arch linux)')
    parser.add_argument("--root", action="store_true", default = False,
                        help="Prints the root location of these scripts")
    parser.add_argument("--print", action="store_true", default = False,
                        help="Prints the paths that will be added")
    parser.add_argument("--only-exec", action="store_true", default = False,
                        help="Only installs the files that are executables. " +
                        "This may break some utilities")
    args = parser.parse_args()


    if args.root:
        print(pscripstroot)
        sys.exit(0)


    if args.install:
        args.install = os.path.abspath(args.install)
        args.profile = os.path.abspath(args.profile)

        print('Installing to "{}" and "{}"...'.format(args.install, args.profile))
        if args.rm_prefix:
            print('Cutting "{}" from paths'.format(args.rm_prefix))

        paths = set([])
        for srcroot, dirs, files in os.walk(pscripstroot, topdown=True):
            if os.path.basename(srcroot).startswith(".") or \
               ".pignoreall" in files:
                dirs[:] = []
                continue

            if ".pignore" in files:
                continue

            noexec = False
            if ".pnoexec" in files:
                noexec = True

            # compute destination dir
            dstroot = os.path.normpath(os.path.join(args.install, os.path.relpath(srcroot, pscripstroot)))

            # print only
            if args.print:
                print(dstroot[len(args.rm_prefix):] if args.rm_prefix and dstroot.startswith(args.rm_prefix) else dstroot)
                continue

            # compute destination files
            dstfiles = set([])
            for file in files:
                #print(file)
                srcfile = os.path.normpath(os.path.join(srcroot, file))
                dstfile = os.path.normpath(os.path.join(dstroot, file))
                if not args.only_exec or os.access(dstfile, os.X_OK):
                    dstfiles.add((srcfile, dstfile))

            if len(dstfiles) < 1:
                continue

            # add this dir to the final PATH
            if not noexec:
                paths.add(dstroot[len(args.rm_prefix):] if args.rm_prefix and dstroot.startswith(args.rm_prefix) else dstroot)

            # install files
            for file in dstfiles:
                installfile(file[0], file[1], "644" if noexec else "755")

        # build path
        if len(paths) > 0:
            installfile("/dev/null", args.profile)
            with open(args.profile, 'w') as f:
                f.write('export PATH=$PATH:{}'.format(':'.join(paths)))
        sys.exit(0)

    #if args.restore:
    #    restore(args.restore[0])

    # exit
    sys.exit(0)


